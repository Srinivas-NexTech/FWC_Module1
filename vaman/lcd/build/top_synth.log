
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 12.2.0-14+deb12u1 -fPIC -Os)


-- Parsing `/root/vaman/fpga/lcd/LCD.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /root/vaman/fpga/lcd/LCD.v
Parsing Verilog input from `/root/vaman/fpga/lcd/LCD.v' to AST representation.
Generating RTLIL representation for module `\helloworldfpga'.
Warning: reg '\sum0' is assigned in a continuous assignment at /root/vaman/fpga/lcd/LCD.v:16.8-16.18.
Warning: reg '\sum1' is assigned in a continuous assignment at /root/vaman/fpga/lcd/LCD.v:17.8-17.18.
Warning: Replacing memory \Datas with list of registers. See /root/vaman/fpga/lcd/LCD.v:45
/root/vaman/fpga/lcd/LCD.v:85: Warning: Identifier `\a10' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `tcl /root/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: helloworldfpga      
Automatically selected helloworldfpga as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.3.3. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81 in module MULT.
Marked 2 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63 in module Q_FRAG.
Marked 4 switch rules as full_case in process $proc$/root/vaman/fpga/lcd/LCD.v:0$38 in module helloworldfpga.
Marked 7 switch rules as full_case in process $proc$/root/vaman/fpga/lcd/LCD.v:87$6 in module helloworldfpga.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 58 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
  Set init value: \QZ = 1'0
Found init rule in `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:8$33'.
  Set init value: \count = 26'00000000000000000000000000
Found init rule in `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:7$32'.
  Set init value: \i = 1

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Found async reset \QRT in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
     1/9: $3\b11[31:0]
     2/9: $3\b10[31:0]
     3/9: $2\b11[31:0]
     4/9: $2\b10[31:0]
     5/9: $1\b11[31:0]
     6/9: $1\b10[31:0]
     7/9: $1\b[31:0]
     8/9: $1\a01[31:0]
     9/9: $1\a00[31:0]
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:14$37'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:13$36'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:12$35'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:11$34'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:8$33'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:7$32'.
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
     1/12: $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27
     2/12: $2\DATA[3:0]
     3/12: $1$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$26
     4/12: $1$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_ADDR[5:0]$25
     5/12: $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:90$1_DATA[3:0]$14
     6/12: $1\DATA[3:0]
     7/12: $1$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:90$1_DATA[3:0]$13
     8/12: $1$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:90$1_ADDR[5:0]$12
     9/12: $0\count[25:0]
    10/12: $0\i[31:0]
    11/12: $0\LCD_E[0:0]
    12/12: $0\LCD_RS[0:0]
Creating decoders for process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\helloworldfpga.\b' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
No latch inferred for signal `\helloworldfpga.\a00' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
No latch inferred for signal `\helloworldfpga.\a01' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
No latch inferred for signal `\helloworldfpga.\b10' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
No latch inferred for signal `\helloworldfpga.\b11' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
No latch inferred for signal `\helloworldfpga.\b0' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:14$37'.
No latch inferred for signal `\helloworldfpga.\b1' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:13$36'.
No latch inferred for signal `\helloworldfpga.\a0' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:12$35'.
No latch inferred for signal `\helloworldfpga.\a1' from process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:11$34'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1137' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\helloworldfpga.\DATA' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1138' with positive edge clock.
Creating register for signal `\helloworldfpga.\LCD_RS' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1139' with positive edge clock.
Creating register for signal `\helloworldfpga.\LCD_E' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1140' with positive edge clock.
Creating register for signal `\helloworldfpga.\i' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1141' with positive edge clock.
Creating register for signal `\helloworldfpga.\count' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1142' with positive edge clock.
Creating register for signal `\helloworldfpga.$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:90$1_ADDR' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1143' with positive edge clock.
Creating register for signal `\helloworldfpga.$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:90$1_DATA' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1144' with positive edge clock.
Creating register for signal `\helloworldfpga.$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_ADDR' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1145' with positive edge clock.
Creating register for signal `\helloworldfpga.$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
  created $dff cell `$procdff$1146' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[1]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1147' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[2]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1148' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[3]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1149' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[4]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1150' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[5]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1151' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[6]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1152' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[7]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1153' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[8]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1154' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[9]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1155' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[10]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1156' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[11]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1157' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[12]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1158' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[13]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1159' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[14]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1160' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[15]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1161' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[16]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1162' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[17]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1163' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[18]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1164' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[19]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1165' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[20]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1166' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[21]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1167' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[22]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1168' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[23]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1169' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[24]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1170' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[25]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1171' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[26]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1172' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[27]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1173' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[28]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1174' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[29]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1175' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[30]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1176' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[31]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1177' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[32]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1178' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[33]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1179' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[34]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1180' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[35]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1181' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[36]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1182' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[37]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1183' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[38]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1184' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[39]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1185' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[40]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1186' with positive edge clock.
Creating register for signal `\helloworldfpga.\Datas[41]' using process `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
  created $dff cell `$procdff$1187' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
Removing empty process `MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Found and cleaned up 4 empty switches in `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:0$38'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:14$37'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:13$36'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:12$35'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:11$34'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:8$33'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:7$32'.
Found and cleaned up 9 empty switches in `\helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:87$6'.
Removing empty process `helloworldfpga.$proc$/root/vaman/fpga/lcd/LCD.v:44$5'.
Cleaned up 18 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~25 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 8 unused cells and 149 unused wires.
<suppressed ~9 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~228 debug messages>
Removed a total of 76 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1060.
    dead port 2/2 on $mux $procmux$1004.
Removed 2 multiplexer ports.
<suppressed ~7 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
    New ctrl vector for $pmux cell $procmux$961: { $procmux$1003_CMP $procmux$1051_CMP $auto$opt_reduce.cc:134:opt_mux$1203 $auto$opt_reduce.cc:134:opt_mux$1201 $procmux$1030_CMP $auto$opt_reduce.cc:134:opt_mux$1199 $procmux$1026_CMP $auto$opt_reduce.cc:134:opt_mux$1197 $auto$opt_reduce.cc:134:opt_mux$1195 $auto$opt_reduce.cc:134:opt_mux$1193 $auto$opt_reduce.cc:134:opt_mux$1191 $auto$opt_reduce.cc:134:opt_mux$1189 $procmux$1018_CMP }
    New ctrl vector for $pmux cell $procmux$1017: { $procmux$1003_CMP $procmux$1051_CMP $auto$opt_reduce.cc:134:opt_mux$1219 $auto$opt_reduce.cc:134:opt_mux$1217 $procmux$1030_CMP $auto$opt_reduce.cc:134:opt_mux$1215 $procmux$1026_CMP $auto$opt_reduce.cc:134:opt_mux$1213 $auto$opt_reduce.cc:134:opt_mux$1211 $auto$opt_reduce.cc:134:opt_mux$1209 $auto$opt_reduce.cc:134:opt_mux$1207 $auto$opt_reduce.cc:134:opt_mux$1205 $procmux$1018_CMP }
  Optimizing cells in module \helloworldfpga.
Performed a total of 2 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1162 ($dff) from module helloworldfpga.
Removing $procdff$1163 ($dff) from module helloworldfpga.
Removing $procdff$1147 ($dff) from module helloworldfpga.
Removing $procdff$1150 ($dff) from module helloworldfpga.
Removing $procdff$1175 ($dff) from module helloworldfpga.
Removing $procdff$1152 ($dff) from module helloworldfpga.
Removing $procdff$1153 ($dff) from module helloworldfpga.
Removing $procdff$1179 ($dff) from module helloworldfpga.
Removing $procdff$1154 ($dff) from module helloworldfpga.
Removing $procdff$1156 ($dff) from module helloworldfpga.
Removing $procdff$1158 ($dff) from module helloworldfpga.
Replaced 11 DFF cells.

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 60 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.13. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
Warning: Wire helloworldfpga.\Datas[0] [3] is used but has no driver.
Warning: Wire helloworldfpga.\Datas[0] [2] is used but has no driver.
Warning: Wire helloworldfpga.\Datas[0] [1] is used but has no driver.
Warning: Wire helloworldfpga.\Datas[0] [0] is used but has no driver.
Warning: Wire helloworldfpga.\a10 is used but has no driver.
found and reported 5 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 bits (of 32) from port B of cell helloworldfpga.$le$/root/vaman/fpga/lcd/LCD.v:88$11 ($le).
Removed top 27 bits (of 32) from port B of cell helloworldfpga.$eq$/root/vaman/fpga/lcd/LCD.v:101$18 ($eq).
Removed top 10 bits (of 26) from port B of cell helloworldfpga.$eq$/root/vaman/fpga/lcd/LCD.v:102$19 ($eq).
Removed top 30 bits (of 32) from port B of cell helloworldfpga.$add$/root/vaman/fpga/lcd/LCD.v:104$20 ($add).
Removed top 31 bits (of 32) from port B of cell helloworldfpga.$add$/root/vaman/fpga/lcd/LCD.v:107$21 ($add).
Removed top 6 bits (of 32) from port Y of cell helloworldfpga.$add$/root/vaman/fpga/lcd/LCD.v:107$21 ($add).
Removed top 27 bits (of 32) from port B of cell helloworldfpga.$gt$/root/vaman/fpga/lcd/LCD.v:109$22 ($gt).
Removed top 25 bits (of 32) from port B of cell helloworldfpga.$le$/root/vaman/fpga/lcd/LCD.v:109$23 ($le).
Removed top 16 bits (of 26) from port B of cell helloworldfpga.$eq$/root/vaman/fpga/lcd/LCD.v:113$28 ($eq).
Removed top 25 bits (of 32) from port B of cell helloworldfpga.$gt$/root/vaman/fpga/lcd/LCD.v:121$31 ($gt).
Removed top 4 bits (of 6) from port B of cell helloworldfpga.$procmux$1000_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell helloworldfpga.$procmux$1001_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell helloworldfpga.$procmux$1002_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1028_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1029_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1030_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1031_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1032_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1033_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1034_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1035_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1036_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1037_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1038_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1039_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1040_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1041_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1042_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell helloworldfpga.$procmux$1043_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1044_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1045_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1046_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1047_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1048_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1049_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1050_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell helloworldfpga.$procmux$1051_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell helloworldfpga.$procmux$1052_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell helloworldfpga.$procmux$1053_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell helloworldfpga.$procmux$1054_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell helloworldfpga.$procmux$1055_CMP0 ($eq).
Removed top 3 bits (of 4) from FF cell helloworldfpga.$procdff$1187 ($dff).
Removed top 6 bits (of 32) from wire helloworldfpga.$add$/root/vaman/fpga/lcd/LCD.v:107$21_Y.
Removed top 3 bits (of 4) from wire helloworldfpga.Datas[41].

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module helloworldfpga:
  creating $macc model for $add$/root/vaman/fpga/lcd/LCD.v:104$20 ($add).
  creating $macc model for $add$/root/vaman/fpga/lcd/LCD.v:107$21 ($add).
  creating $alu model for $macc $add$/root/vaman/fpga/lcd/LCD.v:107$21.
  creating $alu model for $macc $add$/root/vaman/fpga/lcd/LCD.v:104$20.
  creating $alu model for $gt$/root/vaman/fpga/lcd/LCD.v:109$22 ($gt): new $alu
  creating $alu model for $gt$/root/vaman/fpga/lcd/LCD.v:121$31 ($gt): new $alu
  creating $alu model for $le$/root/vaman/fpga/lcd/LCD.v:109$23 ($le): merged with $gt$/root/vaman/fpga/lcd/LCD.v:121$31.
  creating $alu model for $le$/root/vaman/fpga/lcd/LCD.v:88$11 ($le): new $alu
  creating $alu model for $eq$/root/vaman/fpga/lcd/LCD.v:101$18 ($eq): merged with $gt$/root/vaman/fpga/lcd/LCD.v:109$22.
  creating $alu cell for $le$/root/vaman/fpga/lcd/LCD.v:88$11: $auto$alumacc.cc:485:replace_alu$1257
  creating $alu cell for $gt$/root/vaman/fpga/lcd/LCD.v:121$31, $le$/root/vaman/fpga/lcd/LCD.v:109$23: $auto$alumacc.cc:485:replace_alu$1272
  creating $alu cell for $gt$/root/vaman/fpga/lcd/LCD.v:109$22, $eq$/root/vaman/fpga/lcd/LCD.v:101$18: $auto$alumacc.cc:485:replace_alu$1287
  creating $alu cell for $add$/root/vaman/fpga/lcd/LCD.v:104$20: $auto$alumacc.cc:485:replace_alu$1296
  creating $alu cell for $add$/root/vaman/fpga/lcd/LCD.v:107$21: $auto$alumacc.cc:485:replace_alu$1299
  created 5 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1230: { $procmux$1049_CMP $procmux$1034_CMP $procmux$1024_CMP $procmux$1021_CMP $procmux$1020_CMP $procmux$1019_CMP $procmux$1018_CMP $procmux$1002_CMP $procmux$1001_CMP $procmux$1000_CMP }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1250: { $procmux$1055_CMP $procmux$1054_CMP $procmux$1052_CMP $procmux$1050_CMP $procmux$1049_CMP $procmux$1048_CMP $procmux$1045_CMP $procmux$1043_CMP $procmux$1038_CMP $procmux$1037_CMP $procmux$1036_CMP $procmux$1035_CMP $procmux$1034_CMP $procmux$1033_CMP $procmux$1032_CMP $procmux$1029_CMP $procmux$1028_CMP $procmux$1025_CMP $procmux$1024_CMP $procmux$1023_CMP $procmux$1022_CMP $procmux$1021_CMP $procmux$1020_CMP $procmux$1019_CMP $procmux$1018_CMP $procmux$1002_CMP $procmux$1001_CMP $procmux$1000_CMP }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$1246: { $procmux$1042_CMP $procmux$1041_CMP $procmux$1039_CMP $procmux$1031_CMP $procmux$1030_CMP $procmux$1027_CMP $procmux$1026_CMP }
  Optimizing cells in module \helloworldfpga.
Performed a total of 3 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 2 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/root/vaman/fpga/lcd/LCD.v:109$24
cell type $auto$alumacc.cc:485:replace_alu$1257
cell type $auto$alumacc.cc:485:replace_alu$1272
cell type $auto$alumacc.cc:485:replace_alu$1287
cell type $auto$alumacc.cc:485:replace_alu$1296
cell type $auto$alumacc.cc:485:replace_alu$1299
cell type $auto$alumacc.cc:520:replace_alu$1270
cell type $auto$alumacc.cc:520:replace_alu$1285
cell type $auto$alumacc.cc:55:get_lt$1262
cell type $auto$alumacc.cc:55:get_lt$1277
cell type $auto$alumacc.cc:55:get_lt$1292
cell type $auto$alumacc.cc:67:get_gt$1266
cell type $auto$alumacc.cc:67:get_gt$1281
cell type $auto$alumacc.cc:68:get_gt$1268
cell type $auto$alumacc.cc:68:get_gt$1283
cell type $auto$alumacc.cc:75:get_eq$1264
cell type $auto$alumacc.cc:75:get_eq$1279
cell type $auto$alumacc.cc:75:get_eq$1294
cell type $auto$alumacc.cc:98:get_of$1260
cell type $auto$alumacc.cc:98:get_of$1275
cell type $auto$alumacc.cc:98:get_of$1290
cell type $auto$opt_reduce.cc:128:opt_mux$1204
cell type $auto$opt_reduce.cc:128:opt_mux$1208
cell type $auto$opt_reduce.cc:128:opt_mux$1210
cell type $auto$opt_reduce.cc:128:opt_mux$1214
cell type $auto$opt_reduce.cc:128:opt_mux$1216
cell type $auto$opt_reduce.cc:128:opt_mux$1218
cell type $auto$pmuxtree.cc:35:or_generator$1242
cell type $auto$pmuxtree.cc:37:or_generator$1230
cell type $auto$pmuxtree.cc:37:or_generator$1246
cell type $auto$pmuxtree.cc:37:or_generator$1250
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1222
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1224
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1226
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1228
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1232
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1234
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1236
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1238
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1240
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1244
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1248
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1252
cell type $eq$/root/vaman/fpga/lcd/LCD.v:102$19
cell type $eq$/root/vaman/fpga/lcd/LCD.v:113$28
cell type $procdff$1138
cell type $procdff$1139
cell type $procdff$1140
cell type $procdff$1141
cell type $procdff$1142
cell type $procdff$1187
cell type $procmux$1000_CMP0
cell type $procmux$1001_CMP0
cell type $procmux$1002_CMP0
cell type $procmux$1007
cell type $procmux$1018_CMP0
cell type $procmux$1019_CMP0
cell type $procmux$1020_CMP0
cell type $procmux$1021_CMP0
cell type $procmux$1022_CMP0
cell type $procmux$1023_CMP0
cell type $procmux$1024_CMP0
cell type $procmux$1025_CMP0
cell type $procmux$1026_CMP0
cell type $procmux$1027_CMP0
cell type $procmux$1028_CMP0
cell type $procmux$1029_CMP0
cell type $procmux$1030_CMP0
cell type $procmux$1031_CMP0
cell type $procmux$1032_CMP0
cell type $procmux$1033_CMP0
cell type $procmux$1034_CMP0
cell type $procmux$1035_CMP0
cell type $procmux$1036_CMP0
cell type $procmux$1037_CMP0
cell type $procmux$1038_CMP0
cell type $procmux$1039_CMP0
cell type $procmux$1040_CMP0
cell type $procmux$1041_CMP0
cell type $procmux$1042_CMP0
cell type $procmux$1043_CMP0
cell type $procmux$1044_CMP0
cell type $procmux$1045_CMP0
cell type $procmux$1046_CMP0
cell type $procmux$1047_CMP0
cell type $procmux$1048_CMP0
cell type $procmux$1049_CMP0
cell type $procmux$1050_CMP0
cell type $procmux$1051_CMP0
cell type $procmux$1052_CMP0
cell type $procmux$1053_CMP0
cell type $procmux$1054_CMP0
cell type $procmux$1055_CMP0
cell type $procmux$1063
cell type $procmux$1073
cell type $procmux$1075
cell type $procmux$1078
cell type $procmux$1080
cell type $procmux$1086
cell type $procmux$1090
cell type $procmux$1092
cell type $procmux$1095
cell type $procmux$1097
cell type $procmux$1101
cell type $procmux$1103
cell type $procmux$1105
cell type $procmux$1109
cell type $procmux$1111
cell type $procmux$1117
cell type $procmux$1120
cell type $procmux$1123
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~6 debug messages>

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1187 ($dff) from module helloworldfpga.
Replaced 1 DFF cells.

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 4 unused cells and 5 unused wires.
<suppressed ~5 debug messages>

4.28.5. Rerunning OPT passes. (Removed registers in this run.)

4.28.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~1 debug messages>

4.28.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.28.8. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.28.10. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1222:
      Old ports: A=4'0110, B=4'0011, Y=$auto$rtlil.cc:2037:Mux$1223
      New ports: A=2'10, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$1223 [2] $auto$rtlil.cc:2037:Mux$1223 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$1223 [3] $auto$rtlil.cc:2037:Mux$1223 [1] } = 2'01
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1226:
      Old ports: A=4'0101, B=4'0010, Y=$auto$rtlil.cc:2037:Mux$1227
      New ports: A=2'01, B=2'10, Y=$auto$rtlil.cc:2037:Mux$1227 [1:0]
      New connections: $auto$rtlil.cc:2037:Mux$1227 [3:2] = { 1'0 $auto$rtlil.cc:2037:Mux$1227 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1234:
      Old ports: A=4'1101, B=4'0100, Y=$auto$rtlil.cc:2037:Mux$1235
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$1235 [0]
      New connections: $auto$rtlil.cc:2037:Mux$1235 [3:1] = { $auto$rtlil.cc:2037:Mux$1235 [0] 2'10 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1238:
      Old ports: A=4'0001, B=4'1000, Y=$auto$rtlil.cc:2037:Mux$1239
      New ports: A=2'01, B=2'10, Y={ $auto$rtlil.cc:2037:Mux$1239 [3] $auto$rtlil.cc:2037:Mux$1239 [0] }
      New connections: $auto$rtlil.cc:2037:Mux$1239 [2:1] = 2'00
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1224:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1223, B=4'000x, Y=$auto$rtlil.cc:2037:Mux$1225
      New ports: A={ $auto$rtlil.cc:2037:Mux$1223 [2] 1'1 $auto$rtlil.cc:2037:Mux$1223 [0] }, B=3'00x, Y=$auto$rtlil.cc:2037:Mux$1225 [2:0]
      New connections: $auto$rtlil.cc:2037:Mux$1225 [3] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1228:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1227, B=4'0000, Y=$auto$rtlil.cc:2037:Mux$1229
      New ports: A=$auto$rtlil.cc:2037:Mux$1227 [1:0], B=2'00, Y=$auto$rtlil.cc:2037:Mux$1229 [1:0]
      New connections: $auto$rtlil.cc:2037:Mux$1229 [3:2] = { 1'0 $auto$rtlil.cc:2037:Mux$1229 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1236:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1235, B=4'1001, Y=$auto$rtlil.cc:2037:Mux$1237
      New ports: A={ 1'1 $auto$rtlil.cc:2037:Mux$1235 [0] }, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$1237 [2] $auto$rtlil.cc:2037:Mux$1237 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$1237 [3] $auto$rtlil.cc:2037:Mux$1237 [1] } = { $auto$rtlil.cc:2037:Mux$1237 [0] 1'0 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1244:
      Old ports: A=4'1100, B=$auto$rtlil.cc:2037:Mux$1239, Y=$auto$rtlil.cc:2037:Mux$1245
      New ports: A=3'110, B={ $auto$rtlil.cc:2037:Mux$1239 [3] 1'0 $auto$rtlil.cc:2037:Mux$1239 [0] }, Y={ $auto$rtlil.cc:2037:Mux$1245 [3:2] $auto$rtlil.cc:2037:Mux$1245 [0] }
      New connections: $auto$rtlil.cc:2037:Mux$1245 [1] = 1'0
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1232:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1229, B=$auto$rtlil.cc:2037:Mux$1225, Y=$auto$rtlil.cc:2037:Mux$1233
      New ports: A={ $auto$rtlil.cc:2037:Mux$1229 [0] $auto$rtlil.cc:2037:Mux$1229 [1:0] }, B=$auto$rtlil.cc:2037:Mux$1225 [2:0], Y=$auto$rtlil.cc:2037:Mux$1233 [2:0]
      New connections: $auto$rtlil.cc:2037:Mux$1233 [3] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1248:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1245, B=$auto$rtlil.cc:2037:Mux$1237, Y=$auto$rtlil.cc:2037:Mux$1249
      New ports: A={ $auto$rtlil.cc:2037:Mux$1245 [3:2] $auto$rtlil.cc:2037:Mux$1245 [0] }, B={ $auto$rtlil.cc:2037:Mux$1237 [0] $auto$rtlil.cc:2037:Mux$1237 [2] $auto$rtlil.cc:2037:Mux$1237 [0] }, Y={ $auto$rtlil.cc:2037:Mux$1249 [3:2] $auto$rtlil.cc:2037:Mux$1249 [0] }
      New connections: $auto$rtlil.cc:2037:Mux$1249 [1] = 1'0
  Optimizing cells in module \helloworldfpga.
Performed a total of 10 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=6\B_WIDTH=31\Y_WIDTH=31 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=26\Y_WIDTH=26 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=28\Y_WIDTH=28 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=5\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=31 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=26 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=28 for cells of type $lcu.
No more expansions possible.
<suppressed ~1364 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~1286 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~1383 debug messages>
Removed a total of 461 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 178 unused cells and 827 unused wires.
<suppressed ~179 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module helloworldfpga..
  Treeifying 383 MUXes:
    Found tree with 2 MUXes at root $0\DATA[3:0] [0].
    Found tree with 2 MUXes at root $0\DATA[3:0] [1].
    Found tree with 2 MUXes at root $0\DATA[3:0] [2].
    Found tree with 2 MUXes at root $0\DATA[3:0] [3].
    Found tree with 2 MUXes at root $0\LCD_RS[0:0].
    Found tree with 2 MUXes at root $0\LCD_E[0:0].
    Found tree with 3 MUXes at root $0\i[31:0] [0].
    Found tree with 3 MUXes at root $0\i[31:0] [1].
    Found tree with 3 MUXes at root $0\i[31:0] [2].
    Found tree with 3 MUXes at root $0\i[31:0] [3].
    Found tree with 3 MUXes at root $0\i[31:0] [4].
    Found tree with 3 MUXes at root $0\i[31:0] [5].
    Found tree with 3 MUXes at root $0\i[31:0] [6].
    Found tree with 3 MUXes at root $0\i[31:0] [7].
    Found tree with 3 MUXes at root $0\i[31:0] [8].
    Found tree with 3 MUXes at root $0\i[31:0] [9].
    Found tree with 3 MUXes at root $0\i[31:0] [10].
    Found tree with 3 MUXes at root $0\i[31:0] [11].
    Found tree with 3 MUXes at root $0\i[31:0] [12].
    Found tree with 3 MUXes at root $0\i[31:0] [13].
    Found tree with 3 MUXes at root $0\i[31:0] [14].
    Found tree with 3 MUXes at root $0\i[31:0] [15].
    Found tree with 3 MUXes at root $0\i[31:0] [16].
    Found tree with 3 MUXes at root $0\i[31:0] [17].
    Found tree with 3 MUXes at root $0\i[31:0] [18].
    Found tree with 3 MUXes at root $0\i[31:0] [19].
    Found tree with 3 MUXes at root $0\i[31:0] [20].
    Found tree with 3 MUXes at root $0\i[31:0] [21].
    Found tree with 3 MUXes at root $0\i[31:0] [22].
    Found tree with 3 MUXes at root $0\i[31:0] [23].
    Found tree with 3 MUXes at root $0\i[31:0] [24].
    Found tree with 3 MUXes at root $0\i[31:0] [25].
    Found tree with 3 MUXes at root $0\i[31:0] [26].
    Found tree with 3 MUXes at root $0\i[31:0] [27].
    Found tree with 3 MUXes at root $0\i[31:0] [28].
    Found tree with 3 MUXes at root $0\i[31:0] [29].
    Found tree with 3 MUXes at root $0\i[31:0] [30].
    Found tree with 3 MUXes at root $0\i[31:0] [31].
    Found tree with 4 MUXes at root $0\count[25:0] [0].
    Found tree with 4 MUXes at root $0\count[25:0] [1].
    Found tree with 4 MUXes at root $0\count[25:0] [2].
    Found tree with 4 MUXes at root $0\count[25:0] [3].
    Found tree with 4 MUXes at root $0\count[25:0] [4].
    Found tree with 4 MUXes at root $0\count[25:0] [5].
    Found tree with 4 MUXes at root $0\count[25:0] [6].
    Found tree with 4 MUXes at root $0\count[25:0] [7].
    Found tree with 4 MUXes at root $0\count[25:0] [8].
    Found tree with 4 MUXes at root $0\count[25:0] [9].
    Found tree with 4 MUXes at root $0\count[25:0] [10].
    Found tree with 4 MUXes at root $0\count[25:0] [11].
    Found tree with 4 MUXes at root $0\count[25:0] [12].
    Found tree with 4 MUXes at root $0\count[25:0] [13].
    Found tree with 4 MUXes at root $0\count[25:0] [14].
    Found tree with 4 MUXes at root $0\count[25:0] [15].
    Found tree with 4 MUXes at root $0\count[25:0] [16].
    Found tree with 4 MUXes at root $0\count[25:0] [17].
    Found tree with 4 MUXes at root $0\count[25:0] [18].
    Found tree with 4 MUXes at root $0\count[25:0] [19].
    Found tree with 4 MUXes at root $0\count[25:0] [20].
    Found tree with 4 MUXes at root $0\count[25:0] [21].
    Found tree with 4 MUXes at root $0\count[25:0] [22].
    Found tree with 4 MUXes at root $0\count[25:0] [23].
    Found tree with 4 MUXes at root $0\count[25:0] [24].
    Found tree with 4 MUXes at root $0\count[25:0] [25].
    Found tree with 5 MUXes at root $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [0].
    Found tree with 3 MUXes at root $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [1].
    Found tree with 4 MUXes at root $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [2].
    Found tree with 3 MUXes at root $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [3].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$1229 [2].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$1237 [3].
    Found tree with 1 MUXes at root $procmux$1073_Y [0].
    Found tree with 1 MUXes at root $procmux$1073_Y [1].
    Found tree with 1 MUXes at root $procmux$1073_Y [2].
    Found tree with 1 MUXes at root $procmux$1073_Y [3].
    Found tree with 1 MUXes at root $procmux$1073_Y [4].
    Found tree with 1 MUXes at root $procmux$1073_Y [5].
    Found tree with 1 MUXes at root $procmux$1073_Y [6].
    Found tree with 1 MUXes at root $procmux$1073_Y [7].
    Found tree with 1 MUXes at root $procmux$1073_Y [8].
    Found tree with 1 MUXes at root $procmux$1073_Y [9].
    Found tree with 1 MUXes at root $procmux$1073_Y [10].
    Found tree with 1 MUXes at root $procmux$1073_Y [11].
    Found tree with 1 MUXes at root $procmux$1073_Y [12].
    Found tree with 1 MUXes at root $procmux$1073_Y [13].
    Found tree with 1 MUXes at root $procmux$1073_Y [14].
    Found tree with 1 MUXes at root $procmux$1073_Y [15].
    Found tree with 1 MUXes at root $procmux$1073_Y [16].
    Found tree with 1 MUXes at root $procmux$1073_Y [17].
    Found tree with 1 MUXes at root $procmux$1073_Y [18].
    Found tree with 1 MUXes at root $procmux$1073_Y [19].
    Found tree with 1 MUXes at root $procmux$1073_Y [20].
    Found tree with 1 MUXes at root $procmux$1073_Y [21].
    Found tree with 1 MUXes at root $procmux$1073_Y [22].
    Found tree with 1 MUXes at root $procmux$1073_Y [23].
    Found tree with 1 MUXes at root $procmux$1073_Y [24].
    Found tree with 1 MUXes at root $procmux$1073_Y [25].
    Found tree with 2 MUXes at root $procmux$1092_Y [0].
    Found tree with 2 MUXes at root $procmux$1092_Y [1].
    Found tree with 2 MUXes at root $procmux$1092_Y [2].
    Found tree with 2 MUXes at root $procmux$1092_Y [3].
    Found tree with 2 MUXes at root $procmux$1092_Y [4].
    Found tree with 2 MUXes at root $procmux$1092_Y [5].
    Found tree with 2 MUXes at root $procmux$1092_Y [6].
    Found tree with 2 MUXes at root $procmux$1092_Y [7].
    Found tree with 2 MUXes at root $procmux$1092_Y [8].
    Found tree with 2 MUXes at root $procmux$1092_Y [9].
    Found tree with 2 MUXes at root $procmux$1092_Y [10].
    Found tree with 2 MUXes at root $procmux$1092_Y [11].
    Found tree with 2 MUXes at root $procmux$1092_Y [12].
    Found tree with 2 MUXes at root $procmux$1092_Y [13].
    Found tree with 2 MUXes at root $procmux$1092_Y [14].
    Found tree with 2 MUXes at root $procmux$1092_Y [15].
    Found tree with 2 MUXes at root $procmux$1092_Y [16].
    Found tree with 2 MUXes at root $procmux$1092_Y [17].
    Found tree with 2 MUXes at root $procmux$1092_Y [18].
    Found tree with 2 MUXes at root $procmux$1092_Y [19].
    Found tree with 2 MUXes at root $procmux$1092_Y [20].
    Found tree with 2 MUXes at root $procmux$1092_Y [21].
    Found tree with 2 MUXes at root $procmux$1092_Y [22].
    Found tree with 2 MUXes at root $procmux$1092_Y [23].
    Found tree with 2 MUXes at root $procmux$1092_Y [24].
    Found tree with 2 MUXes at root $procmux$1092_Y [25].
    Found tree with 2 MUXes at root $procmux$1092_Y [26].
    Found tree with 2 MUXes at root $procmux$1092_Y [27].
    Found tree with 2 MUXes at root $procmux$1092_Y [28].
    Found tree with 2 MUXes at root $procmux$1092_Y [29].
    Found tree with 2 MUXes at root $procmux$1092_Y [30].
    Found tree with 2 MUXes at root $procmux$1092_Y [31].
    Found tree with 2 MUXes at root $procmux$1097_Y [0].
    Found tree with 2 MUXes at root $procmux$1097_Y [1].
    Found tree with 2 MUXes at root $procmux$1097_Y [2].
    Found tree with 2 MUXes at root $procmux$1097_Y [3].
    Found tree with 2 MUXes at root $procmux$1097_Y [4].
    Found tree with 2 MUXes at root $procmux$1097_Y [5].
    Found tree with 2 MUXes at root $procmux$1097_Y [6].
    Found tree with 2 MUXes at root $procmux$1097_Y [7].
    Found tree with 2 MUXes at root $procmux$1097_Y [8].
    Found tree with 2 MUXes at root $procmux$1097_Y [9].
    Found tree with 2 MUXes at root $procmux$1097_Y [10].
    Found tree with 2 MUXes at root $procmux$1097_Y [11].
    Found tree with 2 MUXes at root $procmux$1097_Y [12].
    Found tree with 2 MUXes at root $procmux$1097_Y [13].
    Found tree with 2 MUXes at root $procmux$1097_Y [14].
    Found tree with 2 MUXes at root $procmux$1097_Y [15].
    Found tree with 2 MUXes at root $procmux$1097_Y [16].
    Found tree with 2 MUXes at root $procmux$1097_Y [17].
    Found tree with 2 MUXes at root $procmux$1097_Y [18].
    Found tree with 2 MUXes at root $procmux$1097_Y [19].
    Found tree with 2 MUXes at root $procmux$1097_Y [20].
    Found tree with 2 MUXes at root $procmux$1097_Y [21].
    Found tree with 2 MUXes at root $procmux$1097_Y [22].
    Found tree with 2 MUXes at root $procmux$1097_Y [23].
    Found tree with 2 MUXes at root $procmux$1097_Y [24].
    Found tree with 2 MUXes at root $procmux$1097_Y [25].
    Found tree with 2 MUXes at root $procmux$1097_Y [26].
    Found tree with 2 MUXes at root $procmux$1097_Y [27].
    Found tree with 2 MUXes at root $procmux$1097_Y [28].
    Found tree with 2 MUXes at root $procmux$1097_Y [29].
    Found tree with 2 MUXes at root $procmux$1097_Y [30].
    Found tree with 2 MUXes at root $procmux$1097_Y [31].
    Finished treeification: Found 160 trees.
  Covering trees:
    Replaced tree at $0\DATA[3:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\DATA[3:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\DATA[3:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\DATA[3:0] [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\LCD_RS[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\LCD_E[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [0]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [1]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [2]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [3]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [4]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [5]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [6]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [7]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [8]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [9]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [10]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [11]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [12]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [13]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [14]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [15]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [16]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [17]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [18]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [19]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [20]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [21]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [22]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [23]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [24]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [25]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [26]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [27]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [28]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [29]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [30]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [31]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [0]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [1]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [2]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [3]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [4]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [5]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [6]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [7]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [8]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [9]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [10]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [11]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [12]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [13]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [14]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [15]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [16]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [17]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [18]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [19]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [20]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [21]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [22]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [23]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [24]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\count[25:0] [25]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [0]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [1]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [2]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $2$mem2reg_rd$\Datas$/root/vaman/fpga/lcd/LCD.v:111$2_DATA[3:0]$27 [3]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$1229 [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$1237 [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1073_Y [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1092_Y [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$1097_Y [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 2 decoder MUXes.
<suppressed ~9901 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module helloworldfpga:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5863 for $0\DATA[3:0] [0] -> \DATA [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2919.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5873 for $0\DATA[3:0] [1] -> \DATA [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2920.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5883 for $0\DATA[3:0] [2] -> \DATA [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2921.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5893 for $0\DATA[3:0] [3] -> \DATA [3].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2922.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5903 for $0\LCD_RS[0:0] -> \LCD_RS.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2923.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$5913 for $0\LCD_E[0:0] -> \LCD_E.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$2924.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~64 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~25 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 221 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\helloworldfpga' to `<abc-temp-dir>/input.blif'..
Extracted 799 gates and 885 wires to a netlist network with 84 inputs and 126 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      286
ABC RESULTS:        internal signals:      675
ABC RESULTS:           input signals:       84
ABC RESULTS:          output signals:      126
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 441 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10011011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
No more expansions possible.
<suppressed ~811 debug messages>
Removed 0 unused cells and 750 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 263 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 6646 objects in module helloworldfpga (50 iterations).
<suppressed ~563 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.58.2. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.59. Printing statistics.

=== helloworldfpga ===

   Number of wires:                268
   Number of wire bits:            900
   Number of public wires:         268
   Number of public wire bits:     900
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                356
     LUT1                            1
     LUT2                           88
     LUT3                          158
     LUT4                           16
     dff                            58
     dffe                            6
     mux4x0                         28
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
Warning: Wire helloworldfpga.count has an unprocessed 'init' attribute.
Warning: Wire helloworldfpga.i has an unprocessed 'init' attribute.
found and reported 2 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on helloworldfpga.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port helloworldfpga.DATA using outpad.
Mapping port helloworldfpga.LCD_E using outpad.
Mapping port helloworldfpga.LCD_RS using outpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 1 unused cells and 546 unused wires.
<suppressed ~546 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

5. Printing statistics.

=== helloworldfpga ===

   Number of wires:                363
   Number of wire bits:            363
   Number of public wires:         357
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                363
     LUT1                            1
     LUT2                           88
     LUT3                          158
     LUT4                           16
     dff                            58
     dffe                            6
     logic_0                         1
     mux4x0                         28
     outpad                          6
     qlal4s3b_cell_macro             1

Loading PCF from '/root/vaman/fpga/lcd/quickfeather.pcf'...
Loading pinmap CSV from '/root/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | DATA(4)    | 54         | X32Y3    | BIDIR    | $iopadmap$helloworldfpga.DATA
  outpad     | DATA(5)    | 55         | X30Y3    | BIDIR    | $iopadmap$helloworldfpga.DATA_1
  outpad     | DATA(6)    | 56         | X28Y3    | BIDIR    | $iopadmap$helloworldfpga.DATA_2
  outpad     | DATA(7)    | 57         | X26Y3    | BIDIR    | $iopadmap$helloworldfpga.DATA_3
  outpad     | LCD_E      | 60         | X22Y3    | BIDIR    | $iopadmap$helloworldfpga.LCD_E
  outpad     | LCD_RS     | 59         | X24Y3    | BIDIR    | $iopadmap$helloworldfpga.LCD_RS

6. Executing Verilog backend.
Dumping module `\helloworldfpga'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.
<suppressed ~1 debug messages>

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod$4a30532bc133c2eb9cd5f67b9a7151b65f5b78fc\LUT3 for cells of type LUT3.
Using template dff for cells of type dff.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$5312816914ac0257eca33ac3be87fd42e64349ca\LUT3 for cells of type LUT3.
Using template $paramod$7956fd7bd6fae48e2c4b342c8485ca45330c2da5\LUT3 for cells of type LUT3.
Using template $paramod$effdcfc01bda4dbdfcb4c8c3f2f7837ae0cbd331\LUT4 for cells of type LUT4.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$885d448b152f0d0eb07370269f766062b2b71bdb\LUT4 for cells of type LUT4.
Using template $paramod$e64d32d20d7efced7d6e79c229f687bbe4091c0f\LUT3 for cells of type LUT3.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$0d57a20297f7d814347a60e796eb37c1dbe1a686\LUT3 for cells of type LUT3.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$c3eb90a615d9a5a74ac528502e23010b3c580dc0\LUT3 for cells of type LUT3.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod$7e4bd054dbbe83c893326033e721a854d7384b31\LUT3 for cells of type LUT3.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$e5a1bb0f4f36ac02cd64a0b2ad5eb4d6b19227f1\LUT3 for cells of type LUT3.
Using template $paramod$40e563a4e6fbd221ded2d400d8c027b7cd46ce01\LUT3 for cells of type LUT3.
Using template $paramod$5fff4eed3dfe46da722c8abfad4e43b106987cbf\LUT3 for cells of type LUT3.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$4a069aca13e2fe33719c3f6b01f32ebe33af34c2\LUT3 for cells of type LUT3.
Using template $paramod$81b18dc250e2014551f846fe165bd14718065020\LUT3 for cells of type LUT3.
Using template $paramod$d0072a8af4321893630082a1108feac18ea2649c\LUT3 for cells of type LUT3.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$73295daa79cd8f21300ad173a8fb0822f56672dc\LUT3 for cells of type LUT3.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$1afc89537ee5f3f94914f73379ca86af781a134c\LUT4 for cells of type LUT4.
Using template $paramod$730adfb485ed6cef87eb6b434905db0ddfa9b600\LUT2 for cells of type LUT2.
Using template $paramod$88388c6c6a4eecfc7de7604fe66ccab36e5a053a\LUT2 for cells of type LUT2.
Using template $paramod$634e2f3faf6ec0b13ba52b5e7143f6134b41574e\LUT3 for cells of type LUT3.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template $paramod$bf1c513ceb7577cfbdc75c196fcb4105bbf7b783\LUT3 for cells of type LUT3.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$2f9c59955bd68af8c158394348f8af07a2f0a88c\LUT3 for cells of type LUT3.
Using template $paramod$40bd20eb9a32baabe14d415d8f68ceeffe16561a\LUT3 for cells of type LUT3.
Using template $paramod$599d262041b1d3a38da932c48ee6b03f5bd83570\LUT3 for cells of type LUT3.
Using template $paramod$72dd4379b7d27e2d3f8bb7b284d236064f19b288\LUT3 for cells of type LUT3.
Using template dffe for cells of type dffe.
Using template $paramod$20836409dd4d4eddd1bf52e531e01fc3f9ef0633\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
No more expansions possible.
<suppressed ~972 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~1329 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 254 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== helloworldfpga ===

   Number of wires:               3244
   Number of wire bits:           3361
   Number of public wires:        3215
   Number of public wire bits:    3215
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                362
     ASSP                            1
     BIDIR_CELL                      6
     C_FRAG                         16
     F_FRAG                          1
     Q_FRAG                         64
     T_FRAG                        274

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\helloworldfpga'.

Warnings: 19 unique messages, 22 total
End of script. Logfile hash: 1f41069dab, CPU: user 4.20s system 0.30s, MEM: 241.55 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 12.2.0-14+deb12u1 -fPIC -Os)
Time spent: 45% 18x read_verilog (2 sec), 10% 4x write_verilog (0 sec), ...
